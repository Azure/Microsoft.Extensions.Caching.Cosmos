trigger: none
pr:
  branches:
    include:
    - master
    - releases/*

pool:
  vmImage: 'windows-latest'

steps:
- checkout: self  # self represents the repo where the initial Pipelines YAML file was found
    clean: true  # if true, execute `execute git clean -ffdx && git reset --hard HEAD` before fetching
- pwsh:  |
        Write-Host "Downloading Cosmos Emulator - $env:EMULATORMSIURL" -ForegroundColor green 
        Invoke-WebRequest "$env:EMULATORMSIURL" -OutFile "$env:temp\azure-cosmosdb-emulator.msi"
        Write-Host "Finished Downloading Cosmos Emulator - $env:temp\azure-cosmosdb-emulator.msi" -ForegroundColor green 
        dir "$env:temp" 
        choco install lessmsi
        choco upgrade lessmsi
        mkdir "$env:temp\Azure Cosmos DB Emulator"
        lessmsi x "$env:temp\azure-cosmosdb-emulator.msi" "$env:temp\Azure Cosmos DB Emulator\"
        Write-Host "Starting Cosmos DB Emulator" -ForegroundColor green 
        Start-Process "$env:temp\Azure Cosmos DB Emulator\SourceDir\Azure Cosmos DB Emulator\CosmosDB.Emulator.exe" "/NoExplorer /NoUI /DisableRateLimiting /PartitionCount=100 /Consistency=Strong /enableRio /overrides=sqlAllowGroupByClause:true" -Verb RunAs
        Import-Module "$env:temp\Azure Cosmos DB Emulator\SourceDir\Azure Cosmos DB Emulator\PSModules\Microsoft.Azure.CosmosDB.Emulator"
        Get-Item env:* | Sort-Object -Property Name
        for ($i=0; $i -lt 10; $i++) {
          $status=Get-CosmosDbEmulatorStatus 
          if ($status -ne "Running") {
            sleep 30;
            Write-Host "Cosmos DB Emulator Status: $status" -ForegroundColor yellow
          } else {
            break;
          }
        }
      
    displayName:  Install Public Cosmos DB Emulator
    failOnStderr:  true
    errorActionPreference:  stop
- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    command: build
    projects: '**/*.csproj'
- script: dotnet test ./tests/emulator/CosmosDistributedCacheEmulatorTests.csproj --logger trx
  displayName: 'Running tests'
- task: PublishTestResults@2
  condition: succeededOrFailed()
  inputs:
    testRunner: VSTest
    testResultsFiles: '**/*.trx'